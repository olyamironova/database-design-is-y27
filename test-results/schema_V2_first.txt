Table: city
Columns:
  city_id: integer  DEFAULT nextval('city_city_id_seq'::regclass)
  name: character varying  
  region_id: integer  
  latitude: numeric  
  longitude: numeric  

Constraints:
  city_name_region_id_key: UNIQUE (name, region_id)
  city_pkey: PRIMARY KEY (city_id)
  city_region_id_fkey: FOREIGN KEY (region_id) REFERENCES region(region_id)

Indexes:
  city_pkey: CREATE UNIQUE INDEX city_pkey ON public.city USING btree (city_id)
  city_name_region_id_key: CREATE UNIQUE INDEX city_name_region_id_key ON public.city USING btree (name, region_id)

==================================================

Table: country
Columns:
  country_id: integer  DEFAULT nextval('country_country_id_seq'::regclass)
  country_name: character varying  

Constraints:
  country_country_name_key: UNIQUE (country_name)
  country_pkey: PRIMARY KEY (country_id)

Indexes:
  country_pkey: CREATE UNIQUE INDEX country_pkey ON public.country USING btree (country_id)
  country_country_name_key: CREATE UNIQUE INDEX country_country_name_key ON public.country USING btree (country_name)

==================================================

Table: healthrisklevel
Columns:
  parameter: character varying  
  level: character varying  
  recommendation: text  

Constraints:
  healthrisklevel_level_check: CHECK (((level)::text = ANY ((ARRAY['No Activity'::character varying, 'Low'::character varying, 'Moderate'::character varying, 'High'::character varying, 'Very High'::character varying, 'Extremely High'::character varying, 'Calm'::character varying, 'Mild Storm'::character varying, 'Moderate Storm'::character varying, 'Severe Storm'::character varying, 'Very Severe Storm'::character varying, 'Extremely Severe Storm'::character varying])::text[])))
  healthrisklevel_parameter_check: CHECK (((parameter)::text = ANY ((ARRAY['UV Index'::character varying, 'Pollen Concentration'::character varying, 'Geomagnetic Activity'::character varying, 'AQI'::character varying])::text[])))
  healthrisklevel_pkey: PRIMARY KEY (parameter, level)

Indexes:
  healthrisklevel_pkey: CREATE UNIQUE INDEX healthrisklevel_pkey ON public.healthrisklevel USING btree (parameter, level)

==================================================

Table: monthlyweatherstatistics
Columns:
  statistics_id: integer  DEFAULT nextval('monthlyweatherstatistics_statistics_id_seq'::regclass)
  station_id: integer  
  month: integer  
  year: integer  
  avg_day_temperature: numeric  
  avg_night_temperature: numeric  
  avg_humidity: numeric  
  avg_pressure: numeric  
  avg_wind_speed: numeric  
  total_precipitation: numeric  
  clear_days: integer  
  rainy_days: integer  
  cloudy_days: integer  

Constraints:
  monthlyweatherstatistics_clear_days_check: CHECK ((clear_days >= 0))
  monthlyweatherstatistics_cloudy_days_check: CHECK ((cloudy_days >= 0))
  monthlyweatherstatistics_month_check: CHECK (((month >= 1) AND (month <= 12)))
  monthlyweatherstatistics_pkey: PRIMARY KEY (statistics_id)
  monthlyweatherstatistics_rainy_days_check: CHECK ((rainy_days >= 0))
  monthlyweatherstatistics_station_id_fkey: FOREIGN KEY (station_id) REFERENCES weatherstation(station_id)
  monthlyweatherstatistics_station_id_month_year_key: UNIQUE (station_id, month, year)
  monthlyweatherstatistics_year_check: CHECK ((year >= 2000))

Indexes:
  monthlyweatherstatistics_pkey: CREATE UNIQUE INDEX monthlyweatherstatistics_pkey ON public.monthlyweatherstatistics USING btree (statistics_id)
  monthlyweatherstatistics_station_id_month_year_key: CREATE UNIQUE INDEX monthlyweatherstatistics_station_id_month_year_key ON public.monthlyweatherstatistics USING btree (station_id, month, year)

==================================================

Table: pollenmeasurement
Columns:
  pollen_id: integer  DEFAULT nextval('pollenmeasurement_pollen_id_seq'::regclass)
  measurement_id: integer  
  plant_name: character varying  
  pollen_concentration: numeric  

Constraints:
  pollenmeasurement_measurement_id_fkey: FOREIGN KEY (measurement_id) REFERENCES weathermeasurement(measurement_id)
  pollenmeasurement_measurement_id_plant_name_key: UNIQUE (measurement_id, plant_name)
  pollenmeasurement_pkey: PRIMARY KEY (pollen_id)

Indexes:
  pollenmeasurement_pkey: CREATE UNIQUE INDEX pollenmeasurement_pkey ON public.pollenmeasurement USING btree (pollen_id)
  pollenmeasurement_measurement_id_plant_name_key: CREATE UNIQUE INDEX pollenmeasurement_measurement_id_plant_name_key ON public.pollenmeasurement USING btree (measurement_id, plant_name)

==================================================

Table: region
Columns:
  region_id: integer  DEFAULT nextval('region_region_id_seq'::regclass)
  region_name: character varying  
  country_id: integer  

Constraints:
  region_country_id_fkey: FOREIGN KEY (country_id) REFERENCES country(country_id)
  region_pkey: PRIMARY KEY (region_id)
  region_region_name_key: UNIQUE (region_name)

Indexes:
  region_pkey: CREATE UNIQUE INDEX region_pkey ON public.region USING btree (region_id)
  region_region_name_key: CREATE UNIQUE INDEX region_region_name_key ON public.region USING btree (region_name)

==================================================

Table: sensor
Columns:
  sensor_id: integer  DEFAULT nextval('sensor_sensor_id_seq'::regclass)
  station_id: integer  
  type: character varying  
  model: character varying  
  last_calibration: date NULL 
  status: character varying  

Constraints:
  sensor_pkey: PRIMARY KEY (sensor_id)
  sensor_station_id_fkey: FOREIGN KEY (station_id) REFERENCES weatherstation(station_id)
  sensor_station_id_type_model_key: UNIQUE (station_id, type, model)
  sensor_status_check: CHECK (((status)::text = ANY ((ARRAY['Operational'::character varying, 'Faulty'::character varying, 'Maintenance Required'::character varying])::text[])))

Indexes:
  sensor_pkey: CREATE UNIQUE INDEX sensor_pkey ON public.sensor USING btree (sensor_id)
  sensor_station_id_type_model_key: CREATE UNIQUE INDEX sensor_station_id_type_model_key ON public.sensor USING btree (station_id, type, model)

==================================================

Table: weathermeasurement
Columns:
  measurement_id: integer  DEFAULT nextval('weathermeasurement_measurement_id_seq'::regclass)
  station_id: integer  
  timestamp: timestamp without time zone  DEFAULT CURRENT_TIMESTAMP
  temperature: numeric  
  dew_point_temperature: numeric  
  humidity: numeric  
  pressure: numeric  
  wind_speed: numeric  
  wind_direction: character varying  
  wind_direction_degrees: numeric  
  wind_gusts_speed: numeric  
  precipitation_mm: numeric  
  precipitation_type: character varying  
  uv_index: numeric  
  visibility: numeric  
  geomagnetic_activity: numeric  
  sunrise_time: time without time zone  
  sunset_time: time without time zone  
  aqi: numeric  
  moon_phase: character varying  

Constraints:
  weathermeasurement_moon_phase_check: CHECK (((moon_phase)::text = ANY ((ARRAY['Full Moon'::character varying, 'New Moon'::character varying, 'First Quarter'::character varying, 'Last Quarter'::character varying, 'Growing Sickle'::character varying, 'Growing Moon'::character varying, 'Waning Moon'::character varying, 'Waning Sickle'::character varying])::text[])))
  weathermeasurement_pkey: PRIMARY KEY (measurement_id)
  weathermeasurement_precipitation_type_check: CHECK (((precipitation_type)::text = ANY ((ARRAY['Rain'::character varying, 'Snow'::character varying, 'Hail'::character varying, 'Sleet'::character varying, 'None'::character varying])::text[])))
  weathermeasurement_station_id_fkey: FOREIGN KEY (station_id) REFERENCES weatherstation(station_id)
  weathermeasurement_station_id_timestamp_key: UNIQUE (station_id, "timestamp")
  weathermeasurement_wind_direction_check: CHECK (((wind_direction)::text = ANY ((ARRAY['N'::character varying, 'S'::character varying, 'W'::character varying, 'E'::character varying, 'NW'::character varying, 'SW'::character varying, 'SE'::character varying, 'NE'::character varying])::text[])))

Indexes:
  weathermeasurement_pkey: CREATE UNIQUE INDEX weathermeasurement_pkey ON public.weathermeasurement USING btree (measurement_id)
  weathermeasurement_station_id_timestamp_key: CREATE UNIQUE INDEX weathermeasurement_station_id_timestamp_key ON public.weathermeasurement USING btree (station_id, "timestamp")

==================================================

Table: weatherstation
Columns:
  station_id: integer  DEFAULT nextval('weatherstation_station_id_seq'::regclass)
  city_id: integer  
  latitude: numeric  
  longitude: numeric  
  altitude_above_sea_level_in_metres: numeric  
  manufacturer: character varying  
  model: character varying  
  release_date: date  
  commissioning_date: date  
  last_maintenance: date NULL 
  status: character varying  

Constraints:
  weatherstation_city_id_fkey: FOREIGN KEY (city_id) REFERENCES city(city_id)
  weatherstation_city_id_latitude_longitude_key: UNIQUE (city_id, latitude, longitude)
  weatherstation_pkey: PRIMARY KEY (station_id)
  weatherstation_status_check: CHECK (((status)::text = ANY ((ARRAY['Active'::character varying, 'Inactive'::character varying, 'Under Maintenance'::character varying])::text[])))

Indexes:
  weatherstation_pkey: CREATE UNIQUE INDEX weatherstation_pkey ON public.weatherstation USING btree (station_id)
  weatherstation_city_id_latitude_longitude_key: CREATE UNIQUE INDEX weatherstation_city_id_latitude_longitude_key ON public.weatherstation USING btree (city_id, latitude, longitude)

==================================================

