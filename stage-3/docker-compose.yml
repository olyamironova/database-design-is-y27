services:
  etcd1:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: etcd1
    hostname: etcd1
    environment:
      - ETCD_NAME=etcd1
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd1:2380
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd1:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      - ETCD_INITIAL_CLUSTER_STATE=new
      - ETCD_INITIAL_CLUSTER_TOKEN=pg_etcd_cluster
    volumes:
      - etcd1-data:/var/lib/etcd
    networks:
      - patroni_net

  etcd2:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: etcd2
    hostname: etcd2
    environment:
      - ETCD_NAME=etcd2
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd2:2380
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd2:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      - ETCD_INITIAL_CLUSTER_STATE=new
      - ETCD_INITIAL_CLUSTER_TOKEN=pg_etcd_cluster
    volumes:
      - etcd2-data:/var/lib/etcd
    networks:
      - patroni_net

  etcd3:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: etcd3
    hostname: etcd3
    environment:
      - ETCD_NAME=etcd3
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd3:2380
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd3:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      - ETCD_INITIAL_CLUSTER_STATE=new
      - ETCD_INITIAL_CLUSTER_TOKEN=pg_etcd_cluster
    volumes:
      - etcd3-data:/var/lib/etcd
    networks:
      - patroni_net

  
  haproxy:
    image: haproxy:2.4
    container_name: haproxy
    env_file:
      - .env
    depends_on:
      - patroni1
      - patroni2
      - patroni3
    restart: always
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "5432:5432"
    networks:
      - patroni_net

  patroni1:
    image: registry.opensource.zalan.do/acid/spilo-15:2.1-p3
    container_name: patroni1
    hostname: patroni1
    env_file: patroni.env
    volumes:
      - patroni1-data:/var/lib/postgresql/data
      - ./patroni/patroni1.yml:/etc/patroni.yml
    depends_on:
      - etcd1
      - etcd2
      - etcd3
    environment:
      - PATRONI_NAME=patroni1
      - PATRONI_RESTAPI_CONNECT_ADDRESS=patroni1:8008
      - PATRONI_POSTGRESQL_CONNECT_ADDRESS=patroni1:5432
    ports:
      - "8008:8008"
    networks:
      - patroni_net

  patroni2:
    image: registry.opensource.zalan.do/acid/spilo-15:2.1-p3
    container_name: patroni2
    hostname: patroni2
    env_file: patroni.env
    volumes:
      - patroni2-data:/var/lib/postgresql/data
      - ./patroni/patroni2.yml:/etc/patroni.yml
    depends_on:
      - etcd1
      - etcd2
      - etcd3
    environment:
      - PATRONI_NAME=patroni2
      - PATRONI_RESTAPI_CONNECT_ADDRESS=patroni2:8008
      - PATRONI_POSTGRESQL_CONNECT_ADDRESS=patroni2:5432
    ports:
      - "8009:8008"
    networks:
      - patroni_net

  patroni3:
    image: registry.opensource.zalan.do/acid/spilo-15:2.1-p3
    container_name: patroni3
    hostname: patroni3
    env_file: patroni.env
    volumes:
      - patroni3-data:/var/lib/postgresql/data
      - ./patroni/patroni3.yml:/etc/patroni.yml
    depends_on:
      - etcd1
      - etcd2
      - etcd3
    environment:
      - PATRONI_NAME=patroni3
      - PATRONI_RESTAPI_CONNECT_ADDRESS=patroni3:8008
      - PATRONI_POSTGRESQL_CONNECT_ADDRESS=patroni3:5432
    ports:
      - "8010:8008"
    networks:
      - patroni_net

  flyway:
    image: flyway/flyway:9
    container_name: flyway
    depends_on:
      - haproxy
    env_file:
      - .env
    volumes:
      - ./sql/migrations:/flyway/sql
    environment:
      FLYWAY_URL: jdbc:postgresql://haproxy:5432/postgres?sslmode=disable
      FLYWAY_USER: ${DB_USER}
      FLYWAY_PASSWORD: ${DB_PASSWORD}
      FLYWAY_BASELINE_ON_MIGRATE: "true"
      FLYWAY_TARGET: ${MIGRATION_VERSION:-latest}
      FLYWAY_LOCATIONS: filesystem:/flyway/sql
    command: -connectRetries=10 migrate
    networks:
      - patroni_net
    entrypoint: ["sh", "-c", "sleep 10 && flyway migrate"]

  seed:
    build:
      context: ./seeder
      dockerfile: Dockerfile.app
    depends_on:
      flyway:
        condition: service_completed_successfully
    environment:
      SEED_COUNT: ${SEED_COUNT}
      MIGRATION_VERSION: ${MIGRATION_VERSION:-latest}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    entrypoint: [ "python", "main.py" ]
    networks:
      - patroni_net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - patroni_net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    restart: unless-stopped
    networks:
      - patroni_net

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    depends_on:
      - haproxy
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:${DB_PASSWORD}@haproxy:5432/${DB_NAME}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: /etc/postgres_exporter.yaml
    volumes:
      - ./queries.yaml:/etc/queries.yaml:ro
    ports:
      - "9187:9187"
    restart: unless-stopped
    networks:
      - patroni_net

  pg_backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: pg-backup
    restart: unless-stopped
    depends_on:
      seed:
        condition: service_completed_successfully
    environment:
      DB_HOST: haproxy
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      BACKUP_RETENTION_COUNT: ${BACKUP_RETENTION_COUNT}
      BACKUP_INTERVAL_CRON: ${BACKUP_INTERVAL_CRON}
    volumes:
      - ./backups:/backups
      - /etc/localtime:/etc/localtime:ro
    networks:
      - patroni_net

volumes:
  etcd1-data:
  etcd2-data:
  etcd3-data:
  patroni1-data:
  patroni2-data:
  patroni3-data:

networks:
  patroni_net:
    driver: bridge